import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.stream.Stream;

import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;


public class EstimatedInstanceOverlap {

	public void run(ArrayList<String> classNames, ClassMapping cM) throws IOException {
		
		//for each x2y (d2y, d2o, y2d, o2d)
		String k = "d";
		String x2y = "d2y";
		
		
			//for each className
			for (String className : classNames) {
				HashMap<String, ArrayList<String>> classMap = cM.getClassMap(className);
				if (classMap.containsKey(k)) {
					//for each KGclass
					for (String kgClass : classMap.get(k)) {
						// read partial gold standard (owl:sameAs links)
						
						HashSet<Pair<String, String>> r_p = readGoldStandard(k, x2y, kgClass);
						
						//for each simMeasure
						String simMeasure = "scaledLevenstein";
						
							//for each threshold
							String threshold = "0.9";
							
								// read matching alignment
								HashSet<Pair<String, String>> a = new HashSet<Pair<String, String>>();
								
								//get partial matching alignment
								HashSet<Pair<String, String>> a_p = new HashSet<Pair<String, String>>();
							
					
					}
					
				}
			}
		
		
	}

	private HashSet<Pair<String, String>> readGoldStandard(String k,
			String x2y, String kgClass) throws IOException {
		
		String folder = "";
		switch(k) {
		case "d":
			folder = "DBpedia"; 
			break;
		case "y":
			folder ="YAGO";
			break;
		case "o":
			folder = "OpenCyc";
			break;
		}
		String fileName = "/Users/curtis/SeminarPaper_KG_files/"+folder+"/"+x2y+"/owlSameAs/"+kgClass+".tsv";
		
		return readPairs(fileName);
	}

	private HashSet<Pair<String, String>> readPairs(String fileName) {
		HashSet<Pair<String, String>> pairSet = new HashSet<Pair<String, String>>();
		try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
		    String line;
		    while ((line = br.readLine()) != null) {
		    	String[] values = line.split("\t");
		    	Pair<String, String> p = new ImmutablePair<String, String>(values[0], values[1]);
		    	pairSet.add(p);
		    }
		}
		return pairSet;
	}


}
