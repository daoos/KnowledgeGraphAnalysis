import java.util.HashMap;
import org.apache.commons.lang3.tuple;


public class CountStringSimilarityResults {
	//x2y<kgClass<simMeasure, instanceCount>
	private HashMap<String, HashMap<String, HashMap<String, Integer>>> simResults  = new HashMap<String, HashMap<String, HashMap<String, Integer>>>();
	private HashMap<Triple<>, Integer> simResultsT = 
	
	public CountStringSimilarityResults() {
	
	}
	
	public void addInstanceCount(String x2y, String kgClass, String simMeasure) {
		//add count to hashmap if available
		if (simResults.get(x2y).get(kgClass).get(simMeasure) != null) {
			simResults.put(key, myMap.get(key) + 1)
			
			
			
			int value = simResults.get(x2y).get(kgClass).get(simMeasure);
		}
		
		
	}
	
	/**
	   * Get the number of instances that overlap
	   * @param x2y (fromKG-toKG, available values:d,y,o,n,w. e.g. d2y)
	   * @param kgClass (class of the fromKG)
	   * @param simMeasure (exactMatch, jaccard, jaro, scaledLevenstein, tfidf, jaroWinkler)
	   * @return int (instance overlap count)
	   */
	public int getInstanceOverlapCount(String x2y, String kgClass, String simMeasure) {
		return this.simResults.get(x2y).get(kgClass).get(simMeasure);
	}
	
	
}
