import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.query.ResultSetFactory;
import org.apache.jena.query.ResultSetFormatter;
import org.apache.jena.sparql.engine.http.QueryExceptionHTTP;


public class QueryObject {
	static Map<String, CountObject> resultObject = new HashMap<String, CountObject>();

	public void queryEndpoint(int endpoint) {
		long startTime = System.nanoTime();
		String service = "";
		if (endpoint == 0) {
			service = "http://dbpedia.org/sparql";
		} else if (endpoint == 1) {
			service = "https://linkeddata1.calcul.u-psud.fr/sparql";
		}
		String queryTest = "ASK {}";
		QueryExecution qeTest = QueryExecutionFactory.sparqlService(service, queryTest);
			
		try {
			if(qeTest.execAsk()) {
				System.out.println(service + " is up");
				
					
				String[] kgClasses = null;
				Map<String, Integer> classInstancesCount = new HashMap<String, Integer>();
				Map<String, Map<String, Integer>> classDegrees = new HashMap<String, Map<String, Integer>>();
				Map<String, Map<String, Double>> classInstanceDegrees = new HashMap<String, Map<String, Double>>();
								
				if (endpoint == 0) {
					kgClasses =  getDBpediaClasses();	
				} else if (endpoint == 1) {
					kgClasses = getYAGOclasses();
				}
				classInstancesCount = getClassCount(endpoint, service, kgClasses, true);
				classDegrees = getClassDegrees(endpoint, service, kgClasses);
				classInstanceDegrees = getClassInstaceDegrees(endpoint, service, kgClasses, classInstancesCount);	
				
			}
					
		} catch (QueryExceptionHTTP e) {
			System.out.println(service + " is down: " + e);
		} finally {
			qeTest.close();
			
			System.out.println("DONE for " + service + " in " + TimeUnit.SECONDS.convert((System.nanoTime() - startTime), TimeUnit.NANOSECONDS) +  " seconds" );
		}
	}
	


	private static Map<String, Integer> getClassCount(int endpoint, String service,
			String[] kgClasses, boolean print) {
		Map<String, Integer> classCountsMap = new HashMap<String, Integer>();
		for (String className : kgClasses) {
			//create count object for each class an add it to the resultObject map
			CountObject countObj = new CountObject(className);
			resultObject.put(className, countObj);
			
			String queryString = "";
			queryString = getQueryPrefix();
			queryString = queryString +
					"SELECT (COUNT(?i) AS ?instanceCount) WHERE {\n";
			if (endpoint == 0) { //dbpedia
				queryString = queryString +
						"?i a <http://dbpedia.org/ontology/" + className + "> .}";
			} else if (endpoint == 1) { //yago
				queryString = queryString +
						"?i a <http://yago-knowledge.org/resource/" + className + "> .}";
			}
			ResultSet results = queryEndpoint(service, queryString);
			while (results.hasNext()) {
				QuerySolution sol = results.next();
				
                
				Integer iC = 0;
				if (sol.get("instanceCount").isLiteral()) {
					iC = sol.getLiteral("instanceCount").getInt();
					//if (!classCountsMap.containsKey(className)) {
					//	classCountsMap.put(className, iC);
						
						
					//} else {
					//	System.out.println("classCountsMap already contains a value for "+ className);
					//}
				} else {
					System.out.println("sol is not a literal");
				}
				countObj.setCount(iC);
				
			}
			if (print) {
				System.out.println(className + " count: " + classCountsMap.get(className).toString());
			}
			
		}
		
		return classCountsMap;
	}



	private static Map<String, Map<String, Double>> getClassInstaceDegrees(int endpoint, String service, String[] kgClasses, Map<String, Integer> classNameCounts) {
		Map<String, Map<String, Double>> classInstanceDegrees = new HashMap<String, Map<String, Double>>();
	
		
		for (String className : kgClasses) {
			System.out.println(className);
			Map<String, Double> classInstancesIndegree = new HashMap<String, Double>();
			Map<String, Double> classInstancesOutdegree = new HashMap<String, Double>();
			
			classInstancesIndegree = getClassInstancesIndegree(endpoint, service, className, classNameCounts.get(className));
			classInstancesOutdegree = getClassInstancesOutdegree(endpoint, service, className, classNameCounts.get(className));			
		
			classInstanceDegrees.put(className, classInstancesIndegree);
			classInstanceDegrees.put(className, classInstancesOutdegree);
			//classInstanceDegrees.addAll(classInstancesIndegree);
			//classInstanceDegrees.addAll(classInstancesOutdegree);
		
		}
		
		return classInstanceDegrees;
		
	}


	private static Map<String, Map<String, Integer>> getClassDegrees(int endpoint, String service, String[] kgClasses) {
		Map<String, Map<String, Integer>> classDegrees = new HashMap<String, Map<String, Integer>>();
		

		for (String className : kgClasses) {
			Integer indegree = 0;
			Integer outdegree = 0;
			Map<String, Integer> classIndegree = new HashMap<String, Integer>();
			Map<String, Integer> classOutdegree = new HashMap<String, Integer>();
			
			indegree = getClassIndegree(endpoint, service, className);
			outdegree = getClassOutdegree(endpoint, service, className);	
			
			classIndegree.put("indegree", indegree);
			classOutdegree.put("outdegree", outdegree);
			
			classDegrees.put(className, classIndegree);
			classDegrees.put(className, classOutdegree);
					
		}
		
		return classDegrees;
	}

	private static Map<String, Double> getClassInstancesOutdegree(int endpoint, String service,
			String className, Integer classCount) {
		Map<String, Double> classInstancesOutdegree = new HashMap<String, Double>();
		String queryString = getQueryPrefix();
		queryString = queryString + 	
				"SELECT (MIN(?outdegree) AS ?minOutdegree) (AVG(?outdegree) AS ?avgOutdegree) (MAX(?outdegree) AS ?maxOutdegree) WHERE {\n"+
					"SELECT ?iI (COUNT(?pI) AS ?outdegree) WHERE {\n";
		//check endpoint
		if (endpoint == 0) {				
			queryString = queryString + 	
				"?iI a <http://dbpedia.org/ontology/" +className + "> .\n";
		} else if (endpoint == 1) {
			queryString = queryString + 	
					"?iI a <http://yago-knowledge.org/resource/" +className + "> .\n";
		}
		queryString = queryString + 	
						"?iI ?pI ?oI .\n"+
					"}\n"+
					"GROUP BY ?iI\n"+
				"}";
		//queryEndpoint(service, queryString, true, false);
		String varNames[] = {"minOutdegree","avgOutdegree","maxOutdegree"};
		classInstancesOutdegree = queryEndpoint(service, queryString, varNames);
		
		//median
		queryString = "";
		queryString = getQueryPrefix();
		if (classCount == 0) {
			System.out.println("No instances. All instance outdegrees are 0");
		} else {
			if ((classCount % 2) == 0) {
				//even
				queryString = queryString + 
						"SELECT (AVG(?preMedianOutdegree) AS ?medianOutdegree) WHERE {\n"+
					  "SELECT (?outdegree AS ?preMedianOutdegree) WHERE {\n"+
					    "SELECT ?outdegree WHERE {\n"+
					      "SELECT ?iI (COUNT(?pI) AS ?outdegree)  WHERE {\n";
				// check endpoint
				if (endpoint == 0) {				
					queryString = queryString + 	
							"?iI a <http://dbpedia.org/ontology/" +className + "> .\n";
				} else if (endpoint == 1) {
					queryString = queryString + 	
							"?iI a <http://yago-knowledge.org/resource/" +className + "> .\n";
				}
				queryString = queryString +
					        "?iI ?pI ?oI .\n"+
					      "}\n"+
					      "GROUP BY ?iI\n"+
					    "}\n"+
					    "ORDER BY DESC (?outdegree)\n"+
					  "}\n"+
					  "LIMIT 2\n"+
					  "OFFSET "+ (classCount/2) +"\n"+
					"}";
				
			} else {
				//not even
				queryString = queryString + 
						"SELECT (?outdegree AS ?medianOutdegree) WHERE {\n"+
							"SELECT ?iI ?outdegree WHERE {\n"+
								"SELECT ?iI (COUNT(?pI) AS ?outdegree)  WHERE {\n";
				// check endpoint
				if (endpoint == 0) {				
					queryString = queryString + 	
							"?iI a <http://dbpedia.org/ontology/" +className + "> .\n";
				} else if (endpoint == 1) {
					queryString = queryString + 	
							"?iI a <http://yago-knowledge.org/resource/" +className + "> .\n";
				}
				queryString = queryString +
									"?iI ?pI ?oI .\n"+
								"}\n"+
								"GROUP BY ?iI\n"+
							"}\n"+
							"ORDER BY DESC (?outdegree)\n"+
						"}\n"+
						"LIMIT 1\n"+
						"OFFSET "+ (classCount/2);
			}				
		//queryEndpoint(service, queryString, true, false);
		Double median = queryEndpoint(service, queryString, "medianOutdegree");
		classInstancesOutdegree.put("median", median);
		}

		return classInstancesOutdegree;
	}

	private static Map<String, Double> getClassInstancesIndegree(int endpoint, String service,
			String className, Integer classCount) {
		Map<String, Double> classInstancesIndegree = new HashMap<String, Double>();
		
		String queryString = getQueryPrefix();
		queryString = queryString + 	
				"SELECT (MIN(?indegree) AS ?minIndegree) (AVG(?indegree) AS ?avgIndegree) (MAX(?indegree) AS ?maxIndegree) WHERE {\n"+
					"SELECT ?iI (COUNT(?pI) AS ?indegree) WHERE {\n";
		// check endpoint
		if (endpoint == 0) {				
			queryString = queryString + 	
					"?iI a <http://dbpedia.org/ontology/" +className + "> .\n";
		} else if (endpoint == 1) {
			queryString = queryString + 	
					"?iI a <http://yago-knowledge.org/resource/" +className + "> .\n";
		}
		queryString = queryString +
						"?sI ?pI ?iI .\n"+
					"}\n"+
					"GROUP BY ?iI\n"+
				"}";
		//queryEndpoint(service, queryString, true, false);
		String varNames[] = {"minIndegree","avgIndegree","maxIndegree"};
		classInstancesIndegree = queryEndpoint(service, queryString, varNames);
		
		
		//median
		queryString = "";
		queryString = getQueryPrefix();
		if (classCount == 0) {
			System.out.println("No instances. All instance indegrees are 0");
		} else {
			if ((classCount % 2) == 0) {
				//even
				queryString = queryString + 
						"SELECT (AVG(?preMedianIndegree) AS ?medianIndegree) WHERE {\n"+
					  "SELECT (?indegree AS ?preMedianIndegree) WHERE {\n"+
					    "SELECT ?iI ?indegree WHERE {\n"+
					      "SELECT ?iI (COUNT(?pI) AS ?indegree)  WHERE {\n";
				// check endpoint
				if (endpoint == 0) {				
					queryString = queryString + 	
							"?iI a <http://dbpedia.org/ontology/" +className + "> .\n";
				} else if (endpoint == 1) {
					queryString = queryString + 	
							"?iI a <http://yago-knowledge.org/resource/" +className + "> .\n";
				}
				queryString = queryString +
					        "?sI ?pI ?iI .\n"+
					      "}\n"+
					      "GROUP BY ?iI\n"+
					    "}\n"+
					    "ORDER BY DESC (?indegree)\n"+
					  "}\n"+
					  "LIMIT 2\n"+
					  "OFFSET "+ (classCount/2) +"\n"+
					"}";
				
			} else {
				//not even
				queryString = queryString + 
						"SELECT (?indegree AS ?medianIndegree) WHERE {\n"+
							"SELECT ?iI ?indegree WHERE {\n"+
								"SELECT ?iI (COUNT(?pI) AS ?indegree)  WHERE {\n";
				// check endpoint
				if (endpoint == 0) {				
					queryString = queryString + 	
							"?iI a <http://dbpedia.org/ontology/" +className + "> .\n";
				} else if (endpoint == 1) {
					queryString = queryString + 	
							"?iI a <http://yago-knowledge.org/resource/" +className + "> .\n";
				}
				queryString = queryString +
									"?sI ?pI ?iI .\n"+
								"}\n"+
								"GROUP BY ?iI\n"+
							"}\n"+
							"ORDER BY DESC (?indegree)\n"+
						"}\n"+
						"LIMIT 1\n"+
						"OFFSET "+ (classCount/2);
			}				
		//queryEndpoint(service, queryString, true, false);
		Double median = queryEndpoint(service, queryString, "medianIndegree");
		classInstancesIndegree.put("median", median);
		}
		

		return classInstancesIndegree;
		
		
	}

	private static Integer getClassOutdegree(int endpoint, String service, String className) {
		Double classOutdegree = 0.0;
		String queryString = getQueryPrefix();
		queryString = queryString + 	
					"SELECT (COUNT(?pI) AS ?outdegree" + className + ") WHERE {\n";		
		
		// check endpoint
		if (endpoint == 0) {				
			queryString = queryString + 	
					"<http://dbpedia.org/ontology/" + className +">  ?pI ?oI. }";
		} else if (endpoint == 1) {
			queryString = queryString + 	
					"<http://yago-knowledge.org/resource/" +className + "> ?pI ?oI. }";
		}
		
		classOutdegree = queryEndpoint(service, queryString, "outdegree"+className);
		
		return classOutdegree.intValue();
	}

	private static Integer getClassIndegree(int endpoint, String service, String className) {
		Double classIndegree = 0.0;
		String queryString = getQueryPrefix();
		queryString = queryString + 	
					"SELECT (COUNT(?pI) AS ?indegree" + className + ") WHERE {\n";
		// check endpoint
		if (endpoint == 0) {				
			queryString = queryString + 	
					"?sI ?pI <http://dbpedia.org/ontology/" + className +"> .}";
		} else if (endpoint == 1) {
			queryString = queryString + 	
					"?sI ?pI <http://yago-knowledge.org/resource/" +className + "> . }";
		}
						
		//queryEndpoint(service, queryString, true, false);
		classIndegree = queryEndpoint(service, queryString, "indegree"+className);
		
		
		
		return classIndegree.intValue();
		
	}

	private static ResultSet queryEndpoint(String service, String queryString) {
		
		Query query = QueryFactory.create(queryString);
		QueryExecution qe = QueryExecutionFactory.sparqlService(service, query);
		ResultSet results = qe.execSelect();
		ResultSet resultCopy = ResultSetFactory.copyResults(results);
		
		return resultCopy;
	}
	private static Double queryEndpoint(String service, String queryString, String varName) {
		Double resultD = 0.0;
		Query query = QueryFactory.create(queryString);
		QueryExecution qe = QueryExecutionFactory.sparqlService(service, query);
		ResultSet results = qe.execSelect();
		while (results.hasNext()) {
			QuerySolution sol = results.next();
		
			if (sol.get(varName).isLiteral()) {
				Integer resultI = sol.getLiteral(varName).getInt();
				resultD = (double) resultI;
				
			}
		}
			
		return resultD;
	}
	private static Map<String, Double> queryEndpoint(String service, String queryString, String[] varNames) {
		Map<String, Double> resultMap = new HashMap<String, Double>();

		Query query = QueryFactory.create(queryString);
		QueryExecution qe = QueryExecutionFactory.sparqlService(service, query);
		ResultSet results = qe.execSelect();
		while (results.hasNext()) {
			QuerySolution sol = results.next();
		
			for (String varName : varNames) {		
				if (sol.get(varName).isLiteral()) {
					Integer resultI = sol.getLiteral(varName).getInt();
					Double resultD = (double) resultI;
					resultMap.put(varName, resultD);
				}
			}
		}
			
		return resultMap;
	}
	private static void queryEndpoint(String service, String queryString, boolean print, boolean printBlock) {
		Query query = QueryFactory.create(queryString);
		QueryExecution qe = QueryExecutionFactory.sparqlService(service, query);
		ResultSet results = qe.execSelect();
		//print output
		if (print) {
			if (printBlock) {
				System.out.println(ResultSetFormatter.asText(results));
			} else {
				while (results.hasNext()) {
					String output = results.next().toString();
					System.out.println(output);
				}
			}
		}
	}

	private static String getQueryPrefix() {
		String p = "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n"+
					"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n"+
					"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"+
					"PREFIX dbo: <http://dbpedia.org/ontology/>\n"+
					"PREFIX yago: <http://yago-knowledge.org/resource/>\n";
		return p;
	}

	private static String[] getDBpediaClasses() {
		String classNameArray[] = {"Taxon",
								"Species",
								"Agent",
								"Person",
								"Athlete",
								"Actor",
								"MovieDirector",
								"Celebrity",
								"GovernmentAgency",
								"Company",
								"Place",
								"Location",
								"Region",
								"NaturalRegion",
								"PopulatedPlace",
								"City",
								"Village",
								"Town",
								"Street",
								"Beach",
								"SkiArea",
								"SkiResort",
								"River",
								"Airport",
								"Work",
								"Image",
								"TimePeriod",
								"CareerStation",
								"Politician",
								"PoliticalParty",
								"MusicalWork",
								"Album",
								"Song",
								"Single",
								"Film",
								"Book",
								"Software",
								"Sport",
								"Event",
								"MilitaryConflict",
								"SocietalEvent",
								"SportsEvent",
								"Country",
								"Building",
								"ChemicalSubstance",
								"ChemicalElement",
								"CelestialBody",
								"Planet",
								"MeanOfTransportation",
								"Automobile",
								"Ship",
								"Spacecraft"
								};
		return classNameArray;
	}
	
	private String[] getYAGOclasses() {
		String classNameArray[] = {"wordnet_object_100002684",
									"wordnet_whole_100003553",
									"wordnet_living_thing_100004258",
									"wordnet_organism_100004475",
									"wordnet_taxonomic_group_107992450",
									"wordnet_species_108110373",
									"wordnet_individual_110203839",	
									"yagoLegalActor",
									"wordnet_causal_agent_100007347",
									"wordnet_person_100007846",
									"wordnet_athlete_109820263",	
									"wordnet_actor_109767197",	
									"wordnet_director_110015215",	
									"wordnet_celebrity_109903153",	
									"wordnet_male_109624168",
									"wordnet_group_100031264",
									"wordnet_government_108050678",
									"wordnet_stock_company_108383310",
									"wordnet_location_100027167",
									"wordnet_region_108630985",
									"yagoGeoEntity",
									"wordnet_settlement_108672562",		
									"wordnet_city_108524735",
									"wordnet_village_108672738",	
									"wordnet_town_108665504",
									"wordnet_street_104334599",		
									"wordnet_beach_109217230",	
									"wordnet_ski_resort_108652376",		
									"wordnet_river_109411430",
									"wordnet_airport_102692232",
									"wordnet_abstraction_100002137",
									"wordnet_artifact_100021939",
									"wordnet_work_104599396",
									"wordnet_picture_106999436",
									"wordnet_picture_103931044",
									"wordnet_time_interval_115269513",
									"wordnet_noun_106319293",
									"wordnet_politician_110450303",
									"wordnet_politician_110451263",
									"wordnet_party_108256968",
									"wordnet_musical_composition_107037465",	
									"wordnet_album_106591815",
									"wordnet_song_107048000",
									"wordnet_movie_106613686",	
									"wordnet_book_106410904",
									"wordnet_book_102870092",
									"wordnet_software_106566077",	
									"wordnet_sport_100523513",
									"wordnet_event_100029378",
									"wordnet_war_101236296",
									"wordnet_social_event_107288639",
									"wordnet_country_108544813",
									"wordnet_building_102913152",
									"wordnet_chemical_element_114622893",	
									"wordnet_substance_100019613",
									"wordnet_celestial_body_109239740",	
									"wordnet_planet_109394007",
									"wordnet_vehicle_104524313",
									"wordnet_conveyance_103100490",
									"wordnet_car_102958343",
									"wordnet_ship_104194289",
									"wordnet_spacecraft_104264914"
									};
		return classNameArray;
	}

}