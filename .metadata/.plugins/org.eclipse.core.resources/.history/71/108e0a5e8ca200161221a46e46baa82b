import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.query.ResultSetFactory;
import org.apache.jena.query.ResultSetFormatter;
import org.apache.jena.rdf.model.Literal;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.sparql.engine.http.QueryEngineHTTP;
import org.apache.jena.sparql.engine.http.QueryExceptionHTTP;
import org.apache.jena.arq.*;


public class queryDBpedia {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String service = "http://dbpedia.org/sparql";
		String queryTest = "ASK {}";
		QueryExecution qeTest = QueryExecutionFactory.sparqlService(service, queryTest);
			
		/*QueryEngineHTTP objectToExec = (QueryEngineHTTP) QueryExecutionFactory.sparqlService(service, queryString);
		objectToExec.addParam("timeout","500000000"); //in milliseconds
		*/
 
			
		try {
			if(qeTest.execAsk()) {
				System.out.println(service + " is up");
				
				String dboClasses[] =  getDboClasses();
				Map<String, Integer> dboClassCounts = new HashMap<String, Integer>();
				dboClassCounts = getClassCount(service, dboClasses);
				getClassDegrees(service, dboClasses);
				getClassInstaceDegrees(service, dboClasses);
						
				
			}
					
		} catch (QueryExceptionHTTP e) {
			System.out.println(service + " is down: " + e);
		} finally {
//			qe.close();
			qeTest.close();
			System.out.println("DONE");
			//objectToExec.close();
		}
	}



	private static Map<String, Integer> getClassCount(String service,
			String[] dboClasses) {
		Map<String, Integer> dboClassCountsMap = new HashMap<String, Integer>();
		for (String dboClass : dboClasses) {
			System.out.println("Get class count for "+ dboClass);
			String queryString = getQueryPrefix();
			queryString = queryString +
					"SELECT (COUNT(?i) AS ?instanceCount) WHERE {\n"+
						"?i a <http://dbpedia.org/ontology/" + dboClass + "> .\n" +
					"}";
			ResultSet results = queryDBpedia(service, queryString, true, false);
			while (results.hasNext()) {
                QuerySolution sol = results.next();
				if (sol.get("instanceCount") == null) {
					System.out.println("Instance count for "+ dboClass + "is null.");
				} else if (sol.get("instanceCount").isLiteral()) {
					
					Integer iC = sol.getLiteral("instanceCount").getInt();
					System.out.println(iC);
				} else {
					System.out.println("sol is not null and not a literal");
				
					
					//String iC = sol.getResource("instanceCount").getURI();//.substring(28);
					//System.out.println("instanceCount for "+ dboClass + " is "+ iC);
				}
				
			}
			
		}
		
		return dboClassCountsMap;
	}



	private static void getClassInstaceDegrees(String service, String[] dboClasses) {
		for (String dboClass : dboClasses) {
			System.out.println(dboClass);
			getClassInstancesIndegree(service, dboClass);
			getClassInstancesOutdegree(service, dboClass);			
		}
		
	}


	private static void getClassDegrees(String service, String[] dboClasses) {
		for (String dboClass : dboClasses) {
			getClassIndegree(service, dboClass);
			getClassOutdegree(service, dboClass);			
		}
		/*
		ResultSet results = qe.execSelect() ;
		//ResultSet results = objectToExec.execSelect();
	    results = ResultSetFactory.copyResults(results) ;
		
//	    String resultsAsString = ResultSetFormatter.asText(results);
//	    System.out.println(resultsAsString);
	    
	    String fileLocation = "./target/DBpedia_class_degrees.txt";
	    File file = new File(fileLocation);
		try (FileOutputStream fop = new FileOutputStream(file)) {
			if (!file.exists()) {
				file.createNewFile();
			}
		    ResultSetFormatter.out(fop, results, query); 
		    System.out.println("file written to " + fileLocation);

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
	  
//	    ResultSetFormatter.out(System.out, results, query) ;
		
//	    for ( ; results.hasNext() ; ) {
//	      QuerySolution soln = results.nextSolution();
//	      Resource r = soln.getResource("?popPlace") ;
////	      Literal l = soln.getLiteral("popPlace") ; 
//	      System.out.println(r.toString());
////	      System.out.println(l);
//	    }
		
	}

	private static void getClassInstancesOutdegree(String service,
			String dboClass) {
		String queryString = getQueryPrefix();
		queryString = queryString + 	
				"SELECT (MIN(?outdegree) AS ?minOutdegree) (AVG(?outdegree) AS ?avgOutdegree) (MAX(?outdegree) AS ?maxOutdegree) WHERE {\n"+
					"SELECT ?iI (COUNT(?pI) AS ?outdegree) WHERE {\n"+ 
						"?iI a <http://dbpedia.org/ontology/" +dboClass + "> .\n" +
						"?iI ?pI ?oI .\n"+
					"}\n"+
					"GROUP BY ?iI\n"+
				"}";
		queryDBpedia(service, queryString, true, false);
		
		//median
	}

	private static void getClassInstancesIndegree(String service,
			String dboClass) {
		String queryString = getQueryPrefix();
		queryString = queryString + 	
				"SELECT (MIN(?indegree) AS ?minIndegree) (AVG(?indegree) AS ?avgIndegree) (MAX(?indegree) AS ?maxIndegree) WHERE {\n"+
					"SELECT ?iI (COUNT(?pI) AS ?indegree) WHERE {\n"+ 
						"?iI a <http://dbpedia.org/ontology/" +dboClass + "> .\n" +
						"?sI ?pI ?iI .\n"+
					"}\n"+
					"GROUP BY ?iI\n"+
				"}";
		queryDBpedia(service, queryString, true, false);
		
		//median
		
		
		
		queryString = "";
		queryString = getQueryPrefix();
		queryString = queryString +
				"SELECT (AVG(?preMedianIndegree) AS ?medianIndegree) WHERE { SELECT (?indegree AS ?preMedianIndegree) WHERE {\n"+
					"SELECT ?iI ?indegree WHERE {\n"+
						"SELECT ?iI (COUNT(?pI) AS ?indegree) WHERE {\n"+
							"?iI a <http://dbpedia.org/ontology/"+dboClass+"> .\n"+
							"?sI ?pI ?iI .\n"+
							"}\n"+
						"GROUP BY ?iI\n"+
						"}\n"+
					"ORDER BY DESC (?indegree)\n"+
				"}\n"+
				"LIMIT 2\n"+
				"OFFSET 880367 }";
		
	}

	private static void getClassOutdegree(String service, String dboClass) {
		String queryString = getQueryPrefix();
		queryString = queryString + 	
					"SELECT (COUNT(?pI) AS ?outdegree" + dboClass + ") WHERE {\n"+
						"<http://dbpedia.org/ontology/" + dboClass +">  ?pI ?oI.\n"+
					"}";		
		queryDBpedia(service, queryString, true, false);
		
	}

	private static void getClassIndegree(String service, String dboClass) {
		String queryString = getQueryPrefix();
		queryString = queryString + 	
					"SELECT (COUNT(?pI) AS ?indegree" + dboClass + ") WHERE {\n"+
						"?sI ?pI <http://dbpedia.org/ontology/" + dboClass +"> .\n"+
					"}";			
		queryDBpedia(service, queryString, true, false);
		
	}

	private static ResultSet queryDBpedia(String service, String queryString, boolean print, boolean printBlock) {
		
		Query query = QueryFactory.create(queryString);
		QueryExecution qe = QueryExecutionFactory.sparqlService(service, query);
		ResultSet results = qe.execSelect();
		ResultSet resultCopy = ResultSetFactory.copyResults(results);
		//print output
		if (print) {
			if (printBlock) {
				System.out.println(ResultSetFormatter.asText(results));
			} else {
				while (results.hasNext()) {
					String output = results.next().toString();
					System.out.println(output);
				}
		}
		}
		return resultCopy;
	}

	private static String getQueryPrefix() {
		// TODO Auto-generated method stub
		String p = "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n"+
					"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n"+
					"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"+
					"PREFIX dbo: <http://dbpedia.org/ontology/>\n";
		return p;
	}

	private static String[] getDboClasses() {
		// TODO Auto-generated method stub
		String dboClassArray[] = {"Taxon",
								"Agent",
								"Company"};
		return dboClassArray;
	}

}
