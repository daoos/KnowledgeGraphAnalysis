import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.query.ResultSetFactory;
import org.apache.jena.query.ResultSetFormatter;
import org.apache.jena.rdf.model.Literal;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.sparql.engine.http.QueryEngineHTTP;
import org.apache.jena.sparql.engine.http.QueryExceptionHTTP;
import org.apache.jena.arq.*;


public class queryDBpedia {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String service = "http://dbpedia.org/sparql";
		String queryTest = "ASK {}";
		QueryExecution qeTest = QueryExecutionFactory.sparqlService(service, queryTest);
			
		/*QueryEngineHTTP objectToExec = (QueryEngineHTTP) QueryExecutionFactory.sparqlService(service, queryString);
		objectToExec.addParam("timeout","500000000"); //in milliseconds
		*/
 
			
		try {
			if(qeTest.execAsk()) {
				System.out.println(service + " is up");
				
				String dboClasses[] =  getDboClasses();
				getClassDegrees(service, dboClasses);
				getClassInstaceDegrees(service, dboClasses);
						
				
			}
					
		} catch (QueryExceptionHTTP e) {
			System.out.println(service + " is down: " + e);
		} finally {
//			qe.close();
			qeTest.close();
			//objectToExec.close();
		}
	}

	private static void getClassInstaceDegrees(String service, String[] dboClasses) {
		// TODO Auto-generated method stub
		
	}

	private static void getClassDegrees(String service, String[] dboClasses) {
		// add PREFIX
		for (String dboClass : dboClasses) {
			getClassIndegree(service, dboClass);
			getClassOutdegree(service, dboClass);
			
		
		}
		/*
		ResultSet results = qe.execSelect() ;
		//ResultSet results = objectToExec.execSelect();
	    results = ResultSetFactory.copyResults(results) ;
		
//	    String resultsAsString = ResultSetFormatter.asText(results);
//	    System.out.println(resultsAsString);
	    
	    String fileLocation = "./target/DBpedia_class_degrees.txt";
	    File file = new File(fileLocation);
		try (FileOutputStream fop = new FileOutputStream(file)) {
			if (!file.exists()) {
				file.createNewFile();
			}
		    ResultSetFormatter.out(fop, results, query); 
		    System.out.println("file written to " + fileLocation);

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
	  
//	    ResultSetFormatter.out(System.out, results, query) ;
		
//	    for ( ; results.hasNext() ; ) {
//	      QuerySolution soln = results.nextSolution();
//	      Resource r = soln.getResource("?popPlace") ;
////	      Literal l = soln.getLiteral("popPlace") ; 
//	      System.out.println(r.toString());
////	      System.out.println(l);
//	    }
		
	}



	private static void getClassOutdegree(String service, String dboClass) {
		String queryString = getQueryPrefix();
		queryString = queryString + 	
					"SELECT (COUNT(?pI) AS ?outdegree" + dboClass + ") WHERE {\n"+
						"<http://dbpedia.org/ontology/" + dboClass +">  ?pI ?oI.\n"+
					"}";
					
				
		queryDBpedia(service, queryString, true);
		
	}

	private static void getClassIndegree(String service, String dboClass) {
		String queryString = getQueryPrefix();
		queryString = queryString + 	
					"SELECT (COUNT(?pI) AS ?indegree" + dboClass + ") WHERE {\n"+
						"?sI ?pI <http://dbpedia.org/ontology/" + dboClass +"> .\n"+
					"}";
				
		queryDBpedia(service, queryString, false);
		
	}

	private static void queryDBpedia(String service, String queryString, boolean printBlock) {
		
		Query query = QueryFactory.create(queryString);
		QueryExecution qe = QueryExecutionFactory.sparqlService(service, query);
		ResultSet results = qe.execSelect();
		//print output
		if (printBlock) {
			System.out.println(ResultSetFormatter.asText(results));
		} else {
			while (results.hasNext()) {
				String output = results.next().toString();
				System.out.println(output);
			}
		}
		
	}

	private static String getQueryPrefix() {
		// TODO Auto-generated method stub
		String p = "PREFIX owl: <http://www.w3.org/2002/07/owl#>\n"+
					"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n"+
					"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"+
					"PREFIX dbo: <http://dbpedia.org/ontology/>\n";
		return p;
	}

	private static String[] getDboClasses() {
		// TODO Auto-generated method stub
		String dboClassArray[] = {"Taxon",
								"Agent"};
		return dboClassArray;
	}

}
