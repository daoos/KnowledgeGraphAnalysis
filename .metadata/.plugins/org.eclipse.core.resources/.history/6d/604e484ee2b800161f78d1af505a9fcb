import com.wcohen.ss.*;

import java.util.*;

import com.wcohen.ss.tokens.*;
import com.wcohen.ss.api.*;

public class StringMeasures {
	//boolean
	private boolean jaccard;
	private boolean jaro;
	private boolean scaledLevenstein;
	private boolean tfidf;
	private boolean jaroWinkler;
	//ArrayList
	private ArrayList<Boolean> stringMeasures = new ArrayList<Boolean>();
	//classes
	private Jaccard jaccardC;
	private Jaro jaroC;
	private ScaledLevenstein scaledLevensteinC;
	private TFIDF tfidfC;
	private JaroWinkler jaroWinklerC;
	//thresholds
	private double jaccardT;
	private double jaroT;
	private double scaledLevensteinT;
	private double tfidfT;
	private double jaroWinklerT;
	

	
	public StringMeasures(boolean jaccard, double jaccardT, boolean jaro, double jaroT, boolean scaledLevenstein, double scaledLevensteinT, boolean tfidf, double tfidfT, boolean jaroWinkler, double jaroWinklerT) {
		this.stringMeasures.add(jaccard);
		this.stringMeasures.add(jaro);
		this.stringMeasures.add(scaledLevenstein);
		this.stringMeasures.add(tfidf);
		this.stringMeasures.add(jaroWinkler);
		
		if (jaccard) {
			this.jaccardC = new Jaccard();
			this.jaccardT = jaccardT;
			this.jaccard = jaccard;
		}
		if (jaro) {
			this.jaroC = new Jaro();
			this.jaroT = jaroT;
			this.jaro = jaro;
		}
		if (scaledLevenstein) {
		 this.scaledLevensteinC = new ScaledLevenstein();
		 this.scaledLevensteinT = scaledLevensteinT;
		 this.scaledLevenstein = scaledLevenstein;
		}
		if (tfidf) {
			this.tfidfC = new TFIDF();
			this.tfidfT = tfidfT;
			this.tfidf = tfidf;
		}
		if (jaroWinkler) {
			this.jaroWinklerC = new JaroWinkler();
			this.jaroWinklerT = jaroWinklerT;
			this.jaroWinkler = jaroWinkler;
		}
	}
	
	public double getJaccardScore(String s1, String s2) {
		return jaccardC.score(jaccardC.prepare(s1), jaccardC.prepare(s2));
	}
	public double getJaroScore(String s1, String s2) {
		return jaroC.score(jaroC.prepare(s1), jaroC.prepare(s2));
	}
	public double getScaledLevenstein(String s1, String s2) {
		return scaledLevensteinC.score(scaledLevensteinC.prepare(s1), scaledLevensteinC.prepare(s2));
	}
	public double getTfidfScore(String s1, String s2) {
		return tfidfC.score(tfidfC.prepare(s1), tfidfC.prepare(s2));
	}
	public double getJaroWinklerScore(String s1, String s2) {
		return jaroWinklerC.score(jaroWinklerC.prepare(s1), jaroWinklerC.prepare(s2));
	}
	public double exactMatch(String s1, String s2) {
		double score = 0.0;
		if (s1.equals(s2)) {
			score = 1.0;
		}
		return score;
	}
	
	public HashMap<String, Double> getSimilarityScores(String s1, String s2) {
		HashMap<String, Double> resultScores = new HashMap<String, Double>();
		
		return resultScores;
	}
	public HashMap<String, Boolean> getSimilarityResult(String s1, String s2) {
		HashMap<String, Boolean> result = new HashMap<String, Boolean>();
		
		return result;
	}
	
}
