import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;


public class GetInstances {

	public static void main(String[] args) {
		
		long startTime = System.nanoTime();
		
		// PARAMETERS
		boolean useSamples = false;
		
		boolean dbpedia = false; //0
		boolean yago = false; //1
		boolean opencyc = false; //2
		boolean nell = true; //3
		boolean wikidata = false; //4
		
		String fType1  = "";
		String fType2 = "";
		String fLabels = "";
		
		if (dbpedia) {
			//DBpedia files
			if (useSamples) {
				fType1 = "/Users/curtis/SeminarPaper_KG_files/DBpedia/instance_types_transitive_en_s.ttl";
				fType2 = "/Users/curtis/SeminarPaper_KG_files/DBpedia/instance_types_en_s.ttl";
				fLabels = "/Users/curtis/SeminarPaper_KG_files/DBpedia/labels_en_s.ttl";
			} else { //full files
				fType1 = "/Users/curtis/SeminarPaper_KG_files/DBpedia/instance_types_transitive_en.ttl";
				fType2 = "/Users/curtis/SeminarPaper_KG_files/DBpedia/instance_types_en.ttl";
				fLabels = "/Users/curtis/SeminarPaper_KG_files/DBpedia/labels_en.ttl";
			}
			// get all classes for DBpedia
			HashSet<String> classes = getDBpediaClasses();
			System.out.println(classes);
			
			runProcess(0, fType1, fType2, fLabels, classes);
		}
		if (yago) {
			//YAGO files
			if (useSamples) {
				fType1 = "/Users/curtis/SeminarPaper_KG_files/YAGO/yagoTransitiveType_s.ttl";
				fType2 = "/Users/curtis/SeminarPaper_KG_files/YAGO/yagoTypes_s.ttl";
				fLabels = "/Users/curtis/SeminarPaper_KG_files/YAGO/yagoLabels_s.ttl";
			} else {
				fType1 = "/Users/curtis/SeminarPaper_KG_files/YAGO/yagoTransitiveType.ttl";
				fType2 = "/Users/curtis/SeminarPaper_KG_files/YAGO/yagoTypes.ttl";
				fLabels = "/Users/curtis/SeminarPaper_KG_files/YAGO/yagoLabels.ttl";
			}
			// get all classes for YAGO
			HashSet<String> classes = getYagoClasses();
			System.out.println(classes);
			
			runProcess(1, fType1, fType2, fLabels, classes);
			
		}
		
		if (opencyc) {
			//OpenCyc files
			if (useSamples) {
				fType1 = "/Users/curtis/SeminarPaper_KG_files/OpenCyc/opencyc-latest_s.nt";
				fType2 = "";
				fLabels = "/Users/curtis/SeminarPaper_KG_files/OpenCyc/opencyc-latest_s.nt";
			} else {
				fType1 = "/Users/curtis/SeminarPaper_KG_files/OpenCyc/opencyc-latest.nt";
				fType2 = "";
				fLabels = "/Users/curtis/SeminarPaper_KG_files/OpenCyc/opencyc-latest.nt";
			}
			// get all classes for OpenCyc
			HashSet<String> classes = getOpenCycClasses();
			System.out.println(classes);
						
			runProcess(2, fType1, fType2, fLabels, classes);
		}
		if (nell) {
			//NELL files
			if (useSamples) {
				fType1 = "/Users/curtis/SeminarPaper_KG_files/NELL/NELL.08m.995.esv_s.csv";
				fType2 = "/Users/curtis/SeminarPaper_KG_files/NELL/NELL.08m.995.ontology_s.csv";
				fLabels = "/Users/curtis/SeminarPaper_KG_files/NELL/NELL.08m.995.esv_s.csv";
			} else {
				fType1 = "/Users/curtis/SeminarPaper_KG_files/NELL/NELL.08m.995.esv.csv";
				fType2 = "/Users/curtis/SeminarPaper_KG_files/NELL/NELL.08m.995.ontology.csv";
				fLabels = "/Users/curtis/SeminarPaper_KG_files/NELL/NELL.08m.995.esv.csv";
			}
			// get all classes for OpenCyc
			HashSet<String> classes = getNellClasses();
			System.out.println(classes);
						
			runProcess(3, fType1, fType2, fLabels, classes);
		}
		if (wikidata) {
			if (useSamples) {
				//local
				//fType1 = "/Users/curtis/SeminarPaper_KG_files/Wikidata/wikidata_s.nt";
				//fLabels = "/Users/curtis/SeminarPaper_KG_files/Wikidata/wikidata_s.nt";
				//volume
				fType1 = "/Volumes/Samsung/Wikidata/wikidata_s.nt";
				fType2 = "";
				fLabels = "/Volumes/Samsung/Wikidata/wikidata_s.nt";
			} else {
				fType1 = "/Volumes/Samsung/Wikidata/wikidata.nt";
				fType2 = "";
				fLabels = "/Volumes/Samsung/Wikidata/wikidata.nt";
			}
			// get all classes for Wikidata
			HashSet<String> classes = getWikidataClasses();
			System.out.println(classes);
						
			runProcess(4, fType1, fType2, fLabels, classes);
		}
		
		System.out.println("EXECUTION TIME: " +  ((System.nanoTime() - startTime)/1000000000) + " seconds." );
	}
		
		

		private static void runProcess(int kg, String fType1,
				String fType2, String fLabels, HashSet<String> classes) {
			
			int skipRows = 0; 
			if (kg == 0 || kg == 3)
				skipRows = 1; //skip first row for dbpedia and nell
			else if (kg == 1)
				skipRows = 10; //skip first ten rows for yago 
			
			HashSet<String> allInstancesSet = new HashSet<String>();
			HashSet<String> labeledInstancesSet = new HashSet<String>();
			
			try {
			// GET ALL INSTANCES FOR ALL CLASSES
				Map<String, Set<String>> classInstances = getClassInstances(kg, fType1, fType2, classes, allInstancesSet, skipRows);
					
				System.out.println("allInstancesSet.size():" + allInstancesSet.size());
				int instanceCount = 0;
				for (Entry<String, Set<String>> entry : classInstances.entrySet()) {
					instanceCount += entry.getValue().size();
				}
				System.out.println("instanceCount:" + instanceCount);
				
				
			// GET ENGLISH INSTANCE LABELS	
				Stream<String> labels = Files.lines(Paths.get(fLabels));
				Map<String, Set<String>> instancesWithLabel =
						//Stream.of(labels)
						labels
								.skip(skipRows) //skip first row
								.filter(line -> containsInstanceNameEn(kg, line, classInstances, allInstancesSet, labeledInstancesSet))
								//.collect(Collectors.toMap(line -> getS(line), Collectors.toSet(line -> getLabel(getO(line)))));
								.collect(Collectors.groupingBy(line -> getS(kg, line), Collectors.mapping(line -> getLabel(kg, line), Collectors.toSet())));
				
				//System.out.println(classInstances);
				//System.out.println(instancesWithLabel);
				int noLabelCounter = 0;
				//combine the results
				Map<String, Set<String>> classInstancesWithLabel = new HashMap<String, Set<String>>();
				for (Entry<String, Set<String>> entry : classInstances.entrySet()) {
					System.out.println(entry.getKey() + ": " + entry.getValue().size() + " instances");
					Set<String> instanceWithLabel = new HashSet<String>();
					//for each instance in class set
					for (String instance : entry.getValue()) {
						//System.out.println(instance);
						//add instance uri and english label
						String allLabels = null;
						if (instancesWithLabel.get(instance) == null) {
							noLabelCounter += 1;
						} else {	
							for (String label : instancesWithLabel.get(instance)) {
								if (allLabels == null) {
									allLabels = label;
								} else {
									allLabels = allLabels + "\t" + label;
								}
							}
							if (kg == 3) {//special case for NELL
								if(allLabels.contains("\" \"")){
									allLabels = allLabels.replace("\" \"", "\t");		
								}
								if(allLabels.contains("\"")) {
									allLabels = allLabels.replace("\"", "");
								}
								System.out.println(allLabels);
								allLabels = allLabels.substring(0, allLabels.length()-1);
							}
						}			
						instanceWithLabel.add(instance + "\t" + allLabels);			
					}
					//add map (instance, label) to class map
					classInstancesWithLabel.put(entry.getKey(), instanceWithLabel);
				}						
				System.out.println("No english label found for "+ noLabelCounter + " instances");		
				
				//write to file
				String resultFolder = "";
				if (kg == 0) {
					resultFolder = "DBpediaResults/";
				} else if (kg == 1){
					resultFolder = "yagoResults/";
				} else if (kg == 2) {
					resultFolder = "opencycResults/";
				} else if (kg == 3) {
					resultFolder ="nellResults/";
				} else if (kg == 4) {
					//local
					//resultFolder = "wikidataResults/";
					//volume
					resultFolder = "/Volumes/Samsung/Wikidata/wikidataResults/";
				}
				//http://stackoverflow.com/questions/2885173/how-to-create-a-file-and-write-to-a-file-in-java
				//for (Entry<String, Set<String>> entry : classInstances.entrySet()) {
				for (Entry<String, Set<String>> entry : classInstancesWithLabel.entrySet()) {
					//write instances to disk
					Path fileName = Paths.get(resultFolder + getClassNameOfURI(kg, entry.getKey()) + "InstancesWithLabels.txt");		
					Files.write(fileName, entry.getValue(), Charset.forName("UTF-8"));
					
				}
			
			} catch (IOException e) {
				System.out.println("ERROR WHILE reading files");
				e.printStackTrace();
			} finally {
				System.out.println("DONE");
			}
		}
	



	private static Map<String, Set<String>> getClassInstances(
				int kg, String fType1, String fType2, HashSet<String> classes, HashSet<String> allInstancesSet, int skipRows) {
		//create stream objects of the files
		//http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html
		Map<String, Set<String>> classInstances = null;
		try {
			if (fType2 != "") { //concat if two files are passed to method
				Stream<String> it1 = Files.lines(Paths.get(fType1));
				Stream<String> it2 = Files.lines(Paths.get(fType2));
				// read files
				classInstances =
						Stream.concat(it1, it2)
							.skip(skipRows) //skip rows 
							.filter(line -> containsClassName(kg, line, classes, allInstancesSet)) //check if line contains a className
							//collect: group by className (third argument), set of all instance names (first argument): instance a className
							.collect(Collectors.groupingBy(line -> getO(kg, line), Collectors.mapping(line -> getS(kg, line), Collectors.toSet())));
			} else { //only one file
				Stream<String> it = Files.lines(Paths.get(fType1));
				// read files
				classInstances =	
						it
							.skip(skipRows) //skip rows 
							.filter(line -> containsClassName(kg, line, classes, allInstancesSet)) //check if line contains a className
							//collect: group by className (third argument), set of all instance names (first argument): instance a className
							.collect(Collectors.groupingBy(line -> getO(kg, line), Collectors.mapping(line -> getS(kg, line), Collectors.toSet())));
			}
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("ERROR READING FILES FOR GETTING THE CLASS INSTANCES");
		}
		return classInstances;
		}



	/**
	  * Check if line contains an instance name with english label
	  * @param line
	  * @returns className (String)
	 */
	 private static boolean containsInstanceNameEn(int kg, String line,
			Map<String, Set<String>> classInstances, HashSet<String> allInstancesSet, HashSet<String> labeledInstancesSet) {
		 boolean containsInstanceName = false;
		//get spo triple
		String spo[] = getSPO(kg, line);
		//get label and English label string
		String labelString = "";
		String englishLabel = "";
		if (kg == 0 || kg == 2 || kg == 4) {
			//DBpedia, OpenCyc, and Wikidata
			labelString = "<http://www.w3.org/2000/01/rdf-schema#label>";
			englishLabel = "@en "; //include whitespace to do not match @en-gb or @en-ca in wikidata
		} else if (kg == 1) {
			//YAGO
			labelString = "rdfs:label";
			englishLabel = "@eng";
		} else if (kg == 3) {
			labelString = "generalizations";
			englishLabel = "concept";
		}
		//check if line was complete (yago contains single element references as line)
		if (spo.length >= 3) {
			//check if instance was already labeled
			if (!labeledInstancesSet.contains(spo[0])) {
				// check if property is rdfs:label
				if (spo[1].equals(labelString)) {
					//check if label is in English
					if (spo[2].contains(englishLabel)) {
						//check if instanceName is contained in one of the sets
						if(allInstancesSet.contains(spo[0])){
							labeledInstancesSet.add(spo[0]);
							containsInstanceName = true;
						}
						}// else {
						//	System.out.println("label is not english: " + line);
						//}
					//} else {
						//System.out.println("property is not rdfs:label for: " + line);
				}
			}
		}
		return containsInstanceName;
	}

	/**
	  * Get third argument of line
	  * @param line
	  * @returns spo[2] (String)
	 */
	private static String getO(int kg, String line) {
		String spo[] = getSPO(kg, line);
		return spo[2];
	}
	/**
	  * Get first argument of line
	  * @param line
	  * @returns spo[0] (String)
	 */
	private static String getS(int kg, String line) {
		String spo[] = getSPO(kg, line);
		return spo[0];
	}
	/**
	  * Get label of string
	  * @param line (string)
	  * @returns substring without label
	 */
	private static String getLabel(int kg, String line) {
		String returnString = "";	
		if (kg==0 || kg == 2 || kg == 4) {
			//DBpedia, OpenCyc, and Wikidata: LABEL_TO_KEEP@en\s
			String o = getO(kg, line);
			returnString = o.substring(0, o.length()-4); //-4 due to whitespace created by getSPO in the end
		} else if (kg == 1) {
			//YAGO: "LABEL_TO_KEEP"@eng .\n
			String o = getO(kg, line);
			returnString = o.substring(1, o.length()-7);			
		} else if (kg == 3) { //NELL
			returnString = getEntityLiteralStringsInNell(kg, line);
		}
		//System.out.println("getLabel: " + returnString);
		return  returnString;
	}
	/**
	  * Get seventh argument of line
	  * @param line
	  * @returns spo[6] (String)
	 */
	private static String getEntityLiteralStringsInNell(int kg, String line) {
		String spo[] = getSPO(kg, line);
		return spo[6];
	}
	

	/**
	  * Check if line contains className
	  * @param kg 0:dbpedia, 1:yago
	  * @param line
	  * @param classes (HashSet containing all class names)
	  * @returns boolean
	 */
	private static boolean containsClassName(int kg, String line, HashSet<String> classes, HashSet<String> allInstancesSet) {
		boolean containsClass = false;
		//get spo triple
		String spo[] = getSPO(kg, line);
		String typeString = "";
		String classString = "";
		String classString2 = "";
		if (kg == 0) {
			//DBpedia
			typeString = "<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>";
			classString = "<http://dbpedia.org/ontology/";
			classString2 = "<http://dbpedia.org/ontology/";
		} else if (kg == 1) {
			//YAGO
			typeString = "rdf:type";
			classString = "<wordnet_";
			classString2 = "<yagoLegalActor";
		} else if (kg == 2) {//opencyc
			typeString = "<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>";
			classString = "<http://sw.opencyc.org/concept/";
			classString2 = "<http://sw.opencyc.org/concept/";	
		} else if (kg == 3) { //nell
			typeString = "generalizations";
			classString = "concept:";
			classString2 = "concept:";
		} else if (kg == 4) { //wikidata
			typeString = "<http://www.wikidata.org/prop/direct/P31>";
			classString = "<http://www.wikidata.org/entity/";
			classString2 = "<http://www.wikidata.org/entity/";
		}
			
		//check if line was complete (yago contains single element references as line)
		if (spo.length >= 3) {
			// check if property is rdfs:type
			if (spo[1].equals(typeString)) {
				//check if className is a dbo class
				if (spo[2].startsWith(classString) || spo[2].startsWith(classString2)) {
					//get pure class name in line
					String lineClassName = getClassNameOfURI(kg, spo[2]);
					//check if className is in classNameArray
					if (classes.contains(lineClassName)) {
						//add instance to allInstancesSet 
						allInstancesSet.add(spo[0]);
						containsClass = true;
					}		
				}
			}
		}
		return containsClass;
	}

	/**
	  * Get class name of URI
	  * @param uriString
	  * @returns substring
	 */
	private static String getClassNameOfURI(int kg, String o) {
		String returnString = "";
		if (kg ==0) {
			//"<http://dbpedia.org/ontology/CLASSNAME_TO_KEEP>"
			returnString = o.substring(29, o.length()-1);
		} else if (kg == 1) { //YAGO
			//"<CLASSNAME_TO_KEEP> ."
			returnString = o.substring(1, o.length()-3);
		} else if (kg == 2) {
			//<http://sw.opencyc.org/concept/CLASSNAME_TO_KEEP>
			returnString = o.substring(31, o.length()-1);
		} else if (kg == 3) { //NELL
			//"concept:CLASSNAME_TO_KEEP"
			returnString = o.substring(8, o.length());
		} else if (kg == 4) {
			//<http://www.wikidata.org/entity/CLASSNAME_TO_KEEP>
			returnString = o.substring(32, o.length()-1);
		}
		//System.out.println("getClassNameOfURI: " + returnString);
		return returnString;
	}

	/**
	  * Get SPO (subject, predicate, object) triple from line
	  * @param kg
	  * @param line
	  * @returns triple-Array
	 */
	private static String[] getSPO(int kg, String line) {
		String[] words;
		if (kg == 0 || kg == 2 || kg == 4) { //DBEPDIA or OpenCyc or Wikidata
			// replace quotes in object and split line to s,p,o triple
			if (line.contains("\"")) {
				String[] allWords = line.replace("\"", "").split("\\s+");
				int wordCounter = 0;
				String s = "";
				String p = "";
				String o = "";
				for (String word : allWords) {
					if (wordCounter == 0) {
						s = word;
					} else if (wordCounter == 1) {
						p = word;
					} else {
						o = o + word + " ";
					}	
					if (word.contains("@en")) {
						break;
					}
					wordCounter += 1;
				}
				String[] preWords = {s,p,o};
				words = preWords;			
			} else {
				String[] preWords = line.split("\\s+"); //split on whitespace
				words = preWords;
			}
		} else { //YAGO and NELL
			String[] preWords = line.split("\\t"); //split on tab
			words = preWords;
		}
		//for (String word : words)
		//	System.out.println(word);
		return words;
	}

	/**
	   * Get HashSet containing all class names in DBpedia 
	   * @return Array of all DBpedia classes
	   */
	private static HashSet<String> getDBpediaClasses() {
		HashSet<String> classNameArray = new HashSet<String>();
		classNameArray.addAll(Arrays.asList(
							//PERSON
								"Agent",
								"Person",
								"Politician",
								"Athlete",
								"Actor",
							//ORGANIZATION
								"GovernmentAgency",
								"Company",
								"PoliticalParty",
							//PLACE
								"Place",
								"PopulatedPlace",
								"City",
								"Village",
								"Town",
								"Country",
							//ART
								"Work",
								"MusicalWork",
								"Album",
								"Song",
								"Single",
								"Film",
								"Book",
							//EVENT	
								"Event",
								"MilitaryConflict",
								"SocietalEvent",
								"SportsEvent",
							//TRANSPORT
								"MeanOfTransportation",
								"Automobile",
								"Ship",
								"Spacecraft",
							//OTHER
								"ChemicalSubstance",
								"ChemicalElement",
								"CelestialBody",
								"Planet")
								);
		return classNameArray;
	}
	
	/**
	   * Get HashSet containing all class names in YAGO 
	   * @return Array of all YAGO classes
	   */
	private static HashSet<String> getYagoClasses() {
		HashSet<String> classNameArray = new HashSet<String>();
		classNameArray.addAll(Arrays.asList(
								//PERSON
									"yagoLegalActor",
									"wordnet_causal_agent_100007347",
									"wordnet_person_100007846",
									"wordnet_politician_110450303",
									"wordnet_politician_110451263",
									"wordnet_athlete_109820263",	
									"wordnet_actor_109767197",	
								//ORGANIZATION
									"wordnet_government_108050678",
									"wordnet_stock_company_108383310",
									"wordnet_party_108256968",
								//PLACE
									"wordnet_location_100027167",
									"wordnet_settlement_108672562",		
									"wordnet_city_108524735",
									"wordnet_village_108672738",	
									"wordnet_town_108665504",
									"wordnet_country_108544813",
								//ART
									"wordnet_work_104599396",								
									"wordnet_musical_composition_107037465",	
									"wordnet_album_106591815",
									"wordnet_song_107048000",
									"wordnet_movie_106613686",	
									"wordnet_book_106410904",
									"wordnet_book_102870092",									
								//EVENT	
									"wordnet_event_100029378",
									"wordnet_war_101236296",
									"wordnet_social_event_107288639",
								//TRANSPORT	
									"wordnet_vehicle_104524313",
									"wordnet_conveyance_103100490",
									"wordnet_car_102958343",
									"wordnet_ship_104194289",
									"wordnet_spacecraft_104264914",
								//OTHER	
									"wordnet_chemical_element_114622893",	
									"wordnet_substance_100019613",
									"wordnet_celestial_body_109239740",
									"wordnet_planet_109394007"
									));
		return classNameArray;
	}
	/**
	   * Get HashSet containing all class names in OpenCyc 
	   * @return Array of all OpenCyc classes
	   */
	private static HashSet<String> getOpenCycClasses() {
		HashSet<String> classNameArray = new HashSet<String>();
		classNameArray.addAll(Arrays.asList(
							//PERSON
								"Mx4rvVinb5wpEbGdrcN5Y29ycA", //intelligent agent
								"Mx4rvVinsZwpEbGdrcN5Y29ycA", //legal agent
								"Mx4rvViAkpwpEbGdrcN5Y29ycA", //person
								"Mx4rvVjntpwpEbGdrcN5Y29ycA", //politician
								"Mx4rvVi--5wpEbGdrcN5Y29ycA", //athlete
								"Mx4rvVjaHZwpEbGdrcN5Y29ycA", //actor
							//ORGANIZATION
								"Mx4rv3HKmpwpEbGdrcN5Y29ycA", //governmental organization
								"Mx4rvVjZ_ZwpEbGdrcN5Y29ycA", //publicly held corporation
								"Mx4rvVj82pwpEbGdrcN5Y29ycA", //political party
							//PLACE
								"Mx4rvVjTtJwpEbGdrcN5Y29ycA", //place
								"Mx4rrPJDpCTfQdeS8IqP1a0lBw", //populated place
								"Mx4rvVjnZ5wpEbGdrcN5Y29ycA", //city
								"Mx4rv33BppwpEbGdrcN5Y29ycA", //village
								"Mx4rvViIeZwpEbGdrcN5Y29ycA", //country
							//ART
								"Mx4rwClAZJwpEbGdrcN5Y29ycA", //conceptual work
								"Mx4rwAXXLZwpEbGdrcN5Y29ycA", //audio conceptual work
								"Mx4rwLmi3JwpEbGdrcN5Y29ycA", //album cw
								"Mx4rwP3teJwpEbGdrcN5Y29ycA", //song cw
								"Mx4rv6i4pJwpEbGdrcN5Y29ycA", //single recording cw
								"Mx4rv973YpwpEbGdrcN5Y29ycA", //movie cw
								"Mx4rwJaXepwpEbGdrcN5Y29ycA", //book copy
							//EVENT
								"Mx4rvViADZwpEbGdrcN5Y29ycA", //event
								"Mx4rvnSeAJwpEbGdrcN5Y29ycA", //military conflict
								"Mx4rvViPO5wpEbGdrcN5Y29ycA", //social occurrence
								"Mx4rvVjzBJwpEbGdrcN5Y29ycA", //sports event
							//TRANSPORT
								"Mx4rvVjT95wpEbGdrcN5Y29ycA", //road vehicle
								"Mx4rvVjUgJwpEbGdrcN5Y29ycA", //conveyance
								"Mx4rvVjVQJwpEbGdrcN5Y29ycA", //transportation device
								"Mx4rvViVwZwpEbGdrcN5Y29ycA", //automobile
								"Mx4rvVi-55wpEbGdrcN5Y29ycA", //watercraft
								"Mx4rwQtlDpwpEbGdrcN5Y29ycA", //spacecraft
							//OTHER
								"Mx4rvVjNlZwpEbGdrcN5Y29ycA", //chemical substance
								"Mx4rvVjReJwpEbGdrcN5Y29ycA", //astronomical object
								"Mx4r-n4BEPzcQdaYSaNf0XKNIw", //celestial object
								"Mx4rvVjQs5wpEbGdrcN5Y29ycA", //celestial body
								"Mx4rvVjRL5wpEbGdrcN5Y29ycA" //planet
							));
		return classNameArray;
	}
	/**
	   * Get HashSet containing all class names in NELL 
	   * @return Array of all NELL classes
	   */
	private static HashSet<String> getNellClasses() {
		HashSet<String> classNameArray = new HashSet<String>();
		classNameArray.addAll(Arrays.asList(
							//PERSON
								"humanagent",
                 				"agent",
                 				"person",
                 				"politician",
                 				"athlete",
                 				"actor",
                 			//ORGANIZATION
                 				"governmentorganization",
                 				"company",
                 				"politicalparty",
    						//PLACE
                 				"location",
                                "geopoliticallocation",
                                "city",
                                "country",
    						//ART
                                "creativework",
                                "musicalbum",
                                "musicsong",
                                "movie",
                                "book",
    						//EVENT
                                "event",
                                "militaryeventtype",
                                "militaryconflict",
                                "sportsevent",
    						//TRANSPORT
                                "vehicle",
    						//OTHER
                                "chemical",
                                "planet"
							));
		return classNameArray;
	}
	/**
	   * Get HashSet containing all class names in Wikidata 
	   * @return Array of all Wikidata classes
	   */
	private static HashSet<String> getWikidataClasses() {
		HashSet<String> classNameArray = new HashSet<String>();
		classNameArray.addAll(Arrays.asList(
						//PERSON
							"Q24229398",//agent
							"Q5", //human
							"Q215627", //person
							"Q82955", //politician
							"Q2066131", //sportsperson
							"Q33999", //actor
               			//ORGANIZATION
               				"Q327333", //government agency
               				"Q891723", //public company
               				"Q7278", //political party
  						//PLACE
               				"Q2221906", //geographic location
               				"Q486972", //human settlement
               				"Q515", //city
               				"Q532", //village
               				"Q3957", //town
               				"Q6256", //country
  						//ART
               				"Q386724", //work
               				"Q2188189", //musical work
               				"Q482994", //album
               				"Q7302866", //music track
               				"Q134556", //single
               				"Q11424", //film
               				"Q571", //book
  						//EVENT
               				"Q1656682", //event
               				"Q350604", //armed conflict
               				"Q198", //war
               				"Q3010205", //celebration
               				"Q16510064", //sporting event
  						//TRANSPORT
               				"Q42889", //vehicle
               				"Q334166", //mode of transport
               				"Q1420", //automobile
               				"Q11446", //ship
               				"Q40218", //spacecraft
  						//OTHER
               				"Q79529", //chemical substance
               				"Q11344", //chemical element
               				"Q6999", //astronomical object
                            "Q634" //planet
							));
		return classNameArray;
	}
}

