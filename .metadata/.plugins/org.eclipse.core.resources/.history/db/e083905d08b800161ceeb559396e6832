import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;


public class CountStringSimilarity {

	public void run(ArrayList<String> classNames, ClassMapping cM) {
		System.out.println("Start CountStringSimilarity.run()");
		long startTime = System.nanoTime();
		
		//get file paths
		Path d = Paths.get("/Users/curtis/SeminarPaper_KG_files/DBpedia/resultsWithLabel/");
		Path y = Paths.get("/Users/curtis/SeminarPaper_KG_files/YAGO/resultsWithLabel/");
		Path o = Paths.get("/Users/curtis/SeminarPaper_KG_files/OpenCyc/resultsWithLabel/");
		Path n = Paths.get("/Users/curtis/SeminarPaper_KG_files/NELL/resultsWithLabel/");
		Path w = Paths.get("/Users/curtis/SeminarPaper_KG_files/Wikidata/resultsWithLabel/");
		
		//result Object: HashMap<stringMeasureName, <HashMap<x2y, intScore>>
		HashMap<String, HashMap<String, Integer>> results = new HashMap<String, HashMap<String, Integer>>();
		
		//for each class
		for (String className : classNames) {
			results.clear();
			HashMap<String, ArrayList<String>> classMap = cM.getClassMap(className);//key: d,w,y,o,n ; value:kgC
			System.out.println(classMap);
			
			//get instances for each kgClass with all labels
			
			
			for (String k : classMap.keySet()) {
			    for (String kgClass : classMap.get(k)) {
			    	System.out.println("kgClass");
			    }
			}
			
			//print results
			System.out.println(results);
		}
			
		
		System.out.println("EXECUTION TIME: " +  ((System.nanoTime() - startTime)/1000000000) + " seconds." );
	}

}
