import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.stream.Stream;


public class CountSameAs {

	public static void main(String[] args) {
		long startTime = System.nanoTime();
		
		// PARAMETERS
		boolean useSamples = false;
		
		boolean dbpedia = true; //0
		boolean yago = false; //1
		boolean opencyc = false; //2
		boolean nell = false; //3
		boolean wikidata = false; //4
		
		
		ClassMapping cM = new ClassMapping();
		ArrayList<String> classNames = getClassNames();
		
		HashMap<String, HashSet<String>> dInstances = new HashMap<String, HashSet<String>>();
		HashMap<String, HashSet<String>> yInstances = new HashMap<String, HashSet<String>>();
		HashMap<String, HashSet<String>> oInstances = new HashMap<String, HashSet<String>>();
		HashMap<String, HashSet<String>> nInstances = new HashMap<String, HashSet<String>>();
		HashMap<String, HashSet<String>> wInstances = new HashMap<String, HashSet<String>>();
		
		//get all instances of all classes
		//for every class (can contain more than one className for each KG)
		for (String className : classNames) {
			HashMap<String, ArrayList<String>> classMap = cM.getClassMap(className);
			System.out.println(classMap);
			//for each className in DBpedia
			for (String kgClassName : classMap.get("d")) {
				Path fileName = Paths.get("../../../SeminarPaper_KG_files/DBpedia/resultsWithLabel/" + kgClassName + "InstancesWithLabels.txt");
				try (Stream<String> stream = Files.lines(fileName)) {

					stream.forEach(line -> getInstance(line));

				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
		}
		
		
		
		//getCountsForKGs(dbpedia, yago, opencyc, nell, wikidata);
		
		
		if (dbpedia) {
			//DBpedia files
			if (useSamples) {
				
			} else { //full files
				
			}
			// get all classes for DBpedia
			//HashSet<String> classes = getDBpediaInstances();
			//System.out.println(classes);
			
		//	runProcess(0, fType1, fType2, fLabels, classes);
		}

		System.out.println("EXECUTION TIME: " +  ((System.nanoTime() - startTime)/1000000000) + " seconds." );
	}
	
	
	private static Object getInstance(String line) {
		String[] words = line.split("\\t");
		return words[0];
	}


	private static ArrayList<String> getClassNames() {
		ArrayList<String> classNames = new ArrayList<String>();
		classNames.addAll(Arrays.asList(
							//PERSON
							/*	"Agent",
								"Person",
								"Politician",*/
								"Athlete",
								"Actor",/*
							//ORGANIZATION
								"GovernmentOrganization",
								"Company",
								"PoliticalParty",
							//PLACE
								"Place",
								"PopulatedPlace",*/
								"City_Village_Town"/*,
								"Country",
							//ART
								"Work",
								"MusicalWork",
								"Album",
								"Song",
								"Single",
								"Movie",
								"Book",
							//EVENT	
								"Event",
								"MilitaryConflict",
								"SocietalEvent",
								"SportsEvent",
							//TRANSPORT
								"Vehicle",
								"Automobile",
								"Ship",
								"Spacecraft",
							//OTHER
								"ChemicalElement_Substance",
								"CelestialBody_Object",
								"Planet"*/
							));
		return classNames;
	}
	
	
}
